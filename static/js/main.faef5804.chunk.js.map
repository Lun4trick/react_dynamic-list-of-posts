{"version":3,"sources":["types/ErrorTypes.ts","components/PostsList.tsx","utils/fetchClient.ts","components/API/Comments.tsx","components/Loader/Loader.tsx","components/Comments.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/API/Users.tsx","components/customHooks/useUserWithPosts.tsx","components/API/Posts.tsx","App.tsx","index.tsx"],"names":["ErrorType","PostsList","posts","onPostOpen","selectedPost","className","map","post","id","title","type","onClick","postOpenHandler","cn","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","statusText","client","getComments","postId","Loader","Comments","React","memo","onNewComment","isPostingComment","useState","comments","setComments","isCommentsLoading","setIsCommentsLoading","isError","setIsError","deletedCommentId","setDeletedCommentId","isDeleting","setIsDeleting","useEffect","result","catch","finally","visibleComments","useMemo","onCommentDelete","commentId","deleteComment","length","CommentsLoading","comment","href","email","name","NewCommentForm","onCommentPost","isSubmited","setIsSubmited","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","ValidEmail","RegExp","nameError","emailError","test","textError","commentIsValid","newComment","onSubmit","event","preventDefault","postComment","htmlFor","value","onChange","target","placeholder","PostDetails","isCommentFormOpen","setIsCommentFormOpen","setIsPostingComment","setPostingState","useCallback","isPosting","UserSelector","onUserSelect","selectedUser","users","setUsers","isDropDownOpen","setIsDropDownOpen","role","user","handleUserSelect","useUserWithPosts","setUser","setPosts","loadingError","setLoadingError","postsIsLoading","setPostsIsloading","userId","App","usersPosts","isLoadingError","setSelectedUser","setSelectedPost","selectUser","userFromServer","isPostsAreReady","selectPost","PostLoading","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faef5804.chunk.js","sourcesContent":["export enum ErrorType {\n  PostLoading = 'Something went wrong while loading posts',\n  CommentsLoading = 'Something went wrong while loading comments',\n  None = 'None',\n}\n","import cn from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null\n  posts: Post[]\n  onPostOpen: (post: Post | null) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPostOpen,\n  selectedPost,\n}) => {\n  const postOpenHandler = (post: Post | null) => {\n    if (selectedPost === post) {\n      onPostOpen(null);\n\n      return;\n    }\n\n    onPostOpen(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    postOpenHandler(post);\n                  }}\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link',\n                    { 'is-light': selectedPost !== post },\n                  )}\n                >\n                  {selectedPost === post\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText);\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../../utils/fetchClient';\nimport { Comment } from '../../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (newComment: Comment) => {\n  return client.post('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../types/ErrorTypes';\nimport { getComments, deleteComment } from './API/Comments';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  onNewComment: () => void,\n  isPostingComment: boolean,\n};\n\nexport const Comments: React.FC<Props> = React.memo(({\n  postId,\n  onNewComment,\n  isPostingComment,\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [deletedCommentId, setDeletedCommentId] = useState<number | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    if (!isPostingComment) {\n      setIsCommentsLoading(true);\n\n      getComments(postId)\n        .then(result => setComments(result))\n        .catch(() => setIsError(true))\n        .finally(() => setIsCommentsLoading(false));\n    }\n  }, [postId]);\n\n  useEffect(() => {\n    if (!isPostingComment && !isDeleting) {\n      getComments(postId)\n        .then(result => setComments(result))\n        .catch(() => setIsError(true))\n        .finally(() => {\n          setDeletedCommentId(null);\n        });\n    }\n  }, [isPostingComment, isDeleting]);\n\n  const visibleComments = useMemo(() => {\n    return comments;\n  }, [comments]);\n\n  const onCommentDelete = (commentId: number) => {\n    setDeletedCommentId(commentId);\n    setIsDeleting(true);\n    deleteComment(commentId)\n      .finally(() => {\n        setIsDeleting(false);\n      });\n  };\n\n  return (\n    <div className=\"block\">\n      {isCommentsLoading && <Loader />}\n\n      {(!isCommentsLoading && !comments?.length) && (\n        <div\n          className=\"notification is-warning\"\n          data-cy=\"NoPostsYet\"\n        >\n          No comments yet\n        </div>\n      )}\n\n      {isError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          {ErrorType.CommentsLoading}\n        </div>\n      )}\n\n      {(!isCommentsLoading\n        && comments?.length !== 0) && (\n        <>\n          <p className=\"title is-4\">Comments:</p>\n          {visibleComments?.map(comment => (\n            <article\n              className={cn(\n                'message is-small',\n                { 'is-hidden': deletedCommentId === comment.id },\n              )}\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    onCommentDelete(comment.id);\n                  }}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n        </>\n      )}\n\n      <button\n        data-cy=\"WriteCommentButton\"\n        type=\"button\"\n        className=\"button is-link\"\n        onClick={onNewComment}\n      >\n        Write a comment\n      </button>\n    </div>\n  );\n});\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { postComment } from './API/Comments';\n\ntype Props = {\n  postId: number;\n  onCommentPost: (postingState: boolean) => void\n  isPostingComment: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onCommentPost,\n  isPostingComment,\n}) => {\n  const [isSubmited, setIsSubmited] = useState(false);\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const ValidEmail = new RegExp(\n    '^[a-zA-Z0-9._:$!%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]$',\n  );\n\n  const nameError = isSubmited && !authorName.length;\n  const emailError = (\n    isSubmited\n    && !ValidEmail.test(authorEmail)\n  );\n  const textError = isSubmited && !commentBody.length;\n\n  const commentIsValid = (\n    !nameError\n    && !emailError\n    && !textError\n  );\n\n  const newComment = {\n    id: 0,\n    postId,\n    name: authorName,\n    email: authorEmail,\n    body: commentBody,\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSubmited(true);\n\n    if (commentIsValid) {\n      onCommentPost(true);\n      postComment(newComment)\n        .finally(() => {\n          onCommentPost(false);\n          setCommentBody('');\n          setIsSubmited(false);\n        });\n    }\n  };\n\n  const onReset = () => {\n    setIsSubmited(false);\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={authorName}\n            onChange={(event) => {\n              setAuthorName(event.target.value);\n            }}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': nameError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={authorEmail}\n            onChange={(event) => {\n              setAuthorEmail(event.target.value);\n            }}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': emailError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Please Enter a valid E-mail(ex: 123@any.com)\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={commentBody}\n            onChange={(event) => {\n              setCommentBody(event.target.value);\n            }}\n            placeholder=\"Type comment here\"\n            className={cn(\n              'input',\n              { 'is-danger': textError },\n            )}\n          />\n        </div>\n\n        {textError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': isPostingComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Comments } from './Comments';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const [isPostingComment, setIsPostingComment] = useState(false);\n\n  const openCommentForm = () => {\n    setIsCommentFormOpen(true);\n  };\n\n  const setPostingState = useCallback((isPosting: boolean) => {\n    setIsPostingComment(isPosting);\n  }, [isPostingComment]);\n\n  useEffect(() => {\n    setIsCommentFormOpen(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <Comments\n          postId={selectedPost.id}\n          onNewComment={openCommentForm}\n          isPostingComment={isPostingComment}\n        />\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            onCommentPost={setPostingState}\n            isPostingComment={isPostingComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from './API/Users';\n\ntype Props = {\n  onUserSelect: (user: User) => void,\n  selectedUser: User | null,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  onUserSelect,\n  selectedUser,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isDropDownOpen, setIsDropDownOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then((result) => {\n        setUsers(result as User[]);\n      });\n  }, []);\n\n  const handleUserSelect = (user: User) => {\n    onUserSelect(user);\n    setIsDropDownOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropDownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDropDownOpen(!isDropDownOpen);\n          }}\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              href={`#user-${user.id}`}\n              key={user.id}\n              className=\"dropdown-item\"\n              onClick={(event) => {\n                event.preventDefault();\n                handleUserSelect(user);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\nimport { getPostsOfUser } from '../API/Posts';\n\nexport const useUserWithPosts = ():[\n  User | null,\n  Post[] | null,\n  boolean,\n  boolean,\n  ((userFromServer: User) => void),\n] => {\n  const [user, setUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [loadingError, setLoadingError] = useState(false);\n  const [postsIsLoading, setPostsIsloading] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      setPostsIsloading(true);\n      setLoadingError(false);\n\n      getPostsOfUser(user.id)\n        .then(result => setPosts(result))\n        .catch(() => {\n          setLoadingError(true);\n        })\n        .finally(() => {\n          setPostsIsloading(false);\n        });\n    }\n  }, [user]);\n\n  return [user, posts, postsIsLoading, loadingError, setUser];\n};\n","import { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\nexport const getPostsOfUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useCallback, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { ErrorType } from './types/ErrorTypes';\nimport { useUserWithPosts } from './components/customHooks/useUserWithPosts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [\n    selectedUser,\n    usersPosts,\n    postsIsLoading,\n    isLoadingError,\n    setSelectedUser,\n  ] = useUserWithPosts();\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  // const [errorType, setErrorType] = useState<ErrorType>(ErrorType.None);\n\n  const selectUser = useCallback((userFromServer: User) => {\n    setSelectedPost(null);\n    setSelectedUser(userFromServer);\n  }, [selectedUser]);\n\n  const isPostsAreReady = (\n    selectedUser\n    && usersPosts\n    && !postsIsLoading\n    && !isLoadingError\n  );\n\n  const selectPost = useCallback(\n    (post: Post | null) => {\n      setSelectedPost(post);\n    }, [selectedPost],\n  );\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  onUserSelect={selectUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {postsIsLoading\n                  && <Loader />}\n\n                {isLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {ErrorType.PostLoading}\n                  </div>\n                )}\n\n                {(isPostsAreReady && !usersPosts?.length) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(isPostsAreReady\n                && usersPosts.length !== 0) && (\n                  <PostsList\n                    selectedPost={selectedPost}\n                    onPostOpen={selectPost}\n                    posts={usersPosts as Post[]}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost as Post}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}